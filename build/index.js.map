{"version":3,"sources":["../src/index.js"],"names":["mongoclient","MongoClient","objectid","ObjectID","dbConfig","env","process","authUrl","configApproved","hasOwnProperty","MONGO_USER","MONGO_PASSWORD","MONGO_PATH","MONGO_HOST","console","log","MONGO_PORT","MONGO_DB","exit","connectionUrl","connect","useNewUrlParser","conn","db","PLUGIN_DEBUG","$","set","message"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,IAAIA,oCAAcC,oBAAlB;AACA,IAAIC,8BAAWC,iBAAf;;0EAEQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHC,4BAFG,GAEQ,EAFR;AAGHC,uBAHG,GAGGC,QAAQD,GAHX;AAIHE,2BAJG,GAIO,IAJP;AAKHC,kCALG,GAKc,IALd;;AAOP;;AAEA,wBAAGH,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIK,UAA7C,EACIN,SAAS,YAAT,IAAyBC,IAAIK,UAA7B;;AAEJ,wBAAGL,IAAII,cAAJ,CAAmB,gBAAnB,KAAwC,CAAC,CAACJ,IAAIM,cAAjD,EACIP,SAAS,gBAAT,IAA6BC,IAAIM,cAAjC;;AAEJ,wBAAGN,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIO,UAA7C,EAAwD;AACpDR,iCAAS,YAAT,IAAyBC,IAAIO,UAA7B;AACH,qBAFD,MAGI;AACA,4BAAGP,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIQ,UAA7C,EACIT,SAAS,YAAT,IAAyBC,IAAIQ,UAA7B,CADJ,KAEK;AACDL,6CAAiB,KAAjB;AACAM,oCAAQC,GAAR,CAAY,wEAAZ;AACH;;AAED,4BAAGV,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIW,UAA7C,EACIZ,SAAS,YAAT,IAAyBC,IAAIW,UAA7B,CADJ,KAEK;AACDR,6CAAiB,KAAjB;AACAM,oCAAQC,GAAR,CAAY,wEAAZ;AACH;AACJ;;AAED,wBAAGV,IAAII,cAAJ,CAAmB,UAAnB,KAAkC,CAAC,CAACJ,IAAIY,QAA3C,EACIb,SAAS,UAAT,IAAuBC,IAAIY,QAA3B,CADJ,KAEK;AACDT,yCAAiB,KAAjB;AACAM,gCAAQC,GAAR,CAAY,qEAAZ;AACH;;AAED,wBAAIX,SAASK,cAAT,CAAwB,YAAxB,KAAyC,CAAC,CAACJ,IAAIK,UAAhD,IACCN,SAASK,cAAT,CAAwB,gBAAxB,KAA6C,CAAC,CAACJ,IAAIM,cADvD,EAEGJ,UAAaH,SAASM,UAAtB,SAAoCN,SAASO,cAA7C;;AA3CI,wBA6CHH,cA7CG;AAAA;AAAA;AAAA;;AA8CHM,4BAAQC,GAAR,CAAY,yFAAZ;AACAT,4BAAQY,IAAR,CAAa,CAAC,CAAd;AA/CG;AAAA;;AAAA;AAkDH,wBAAGd,SAASK,cAAT,CAAwB,YAAxB,CAAH,EACQU,aADR,QAC2Bf,SAAS,YAAT,CAD3B,MAGQe,aAHR,GAG2Bf,SAAS,YAAT,CAH3B,SAGqDA,SAAS,YAAT,CAHrD,SAG+EA,SAAS,UAAT,CAH/E;;AAKA,wBAAGG,OAAH,EAAYY,qBAAoBZ,OAApB,GAA8BY,aAA9B;;AAvDT;AAAA;AAAA,2BA0DkBlB,qBAAYmB,OAAZ,gBAAiCD,aAAjC,EAAkD,EAAEE,iBAAiB,IAAnB,EAAlD,CA1DlB;;AAAA;AA0DKC,wBA1DL;AAAA;AAAA,2BA2DgBA,KAAKC,EAAL,CAAQnB,SAAS,UAAT,CAAR,CA3DhB;;AAAA;AA2DKmB,sBA3DL;;;AA6DC,wBAAGjB,QAAQD,GAAR,CAAYmB,YAAZ,IAA4B,MAA/B,EACIV,QAAQC,GAAR;;AAEJU,6BAAEC,GAAF,CAAM,SAAN,EAAiBH,EAAjB;AAhED;AAAA;;AAAA;AAAA;AAAA;;AAmECT,4BAAQC,GAAR,2BAAoC,YAAEY,OAAtC;;AAnED;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwEPb,4BAAQC,GAAR,2BAAoC,YAAEY,OAAtC;;AAxEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","file":"index.js","sourcesContent":["import { $ } from \"@dekproject/scope\";\nimport { MongoClient, ObjectID } from 'mongodb';\n\nexport let mongoclient = MongoClient;\nexport let objectid = ObjectID;\n\nexport default async () => {\n    try{\n        let dbConfig = {};\n        let env = process.env;\n        let authUrl = null;\n        let configApproved = true;\n\n        // Check the existence of the parameters below in .env\n\n        if(env.hasOwnProperty('MONGO_USER') || !!env.MONGO_USER)\n            dbConfig['MONGO_USER'] = env.MONGO_USER\n\n        if(env.hasOwnProperty('MONGO_PASSWORD') || !!env.MONGO_PASSWORD)\n            dbConfig['MONGO_PASSWORD'] = env.MONGO_PASSWORD\n\n        if(env.hasOwnProperty('MONGO_PATH') || !!env.MONGO_PATH){\n            dbConfig['MONGO_PATH'] = env.MONGO_PATH\n        }\n        else{\n            if(env.hasOwnProperty('MONGO_HOST') && !!env.MONGO_HOST)\n                dbConfig['MONGO_HOST'] = env.MONGO_HOST\n            else {\n                configApproved = false\n                console.log('[ MongoDB Plugin ] - There is no MONGO_HOST variable in the .env file.')\n            }\n\n            if(env.hasOwnProperty('MONGO_PORT') && !!env.MONGO_PORT)\n                dbConfig['MONGO_PORT'] = env.MONGO_PORT\n            else {\n                configApproved = false\n                console.log('[ MongoDB Plugin ] - There is no MONGO_PORT variable in the .env file.')\n            }\n        }\n\n        if(env.hasOwnProperty('MONGO_DB') && !!env.MONGO_DB)\n            dbConfig['MONGO_DB'] = env.MONGO_DB\n        else {\n            configApproved = false\n            console.log('[ MongoDB Plugin ] - There is no MONGO_DB variable in the .env file')\n        }\n\n        if((dbConfig.hasOwnProperty('MONGO_USER') && !!env.MONGO_USER) &&\n           (dbConfig.hasOwnProperty('MONGO_PASSWORD') && !!env.MONGO_PASSWORD))\n           authUrl = `${dbConfig.MONGO_USER}:${dbConfig.MONGO_PASSWORD}@`\n\n        if(!configApproved){\n            console.log('[ MongoDB Plugin ] - Please correct the above errors before restarting the application.')\n            process.exit(-1);\n        }\n        else {\n            if(dbConfig.hasOwnProperty('MONGO_PATH'))\n                var connectionUrl = `${dbConfig['MONGO_PATH']}`\n            else\n                var connectionUrl = `${dbConfig['MONGO_HOST']}:${dbConfig['MONGO_PORT']}/${dbConfig['MONGO_DB']}`;\n\n            if(authUrl) connectionUrl =  `${authUrl}${connectionUrl}`\n\n            try {\n                let conn = await MongoClient.connect(`mongodb://${connectionUrl}`, { useNewUrlParser: true })\n                let db = await conn.db(dbConfig['MONGO_DB']);\n\n                if(process.env.PLUGIN_DEBUG == 'true')\n                    console.log(`[ MongoDB Plugin ] - MongoDB successfully signed`);\n\n                $.set(\"mongodb\", db);\n            }\n            catch (e) {\n                console.log(`[ MongoDB Plugin ] - ${e.message}`)\n            }\n        }\n    }\n    catch (e) {\n        console.log(`[ MongoDB Plugin ] - ${e.message}`)\n    }\n}\n"]}