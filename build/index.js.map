{"version":3,"sources":["../src/index.js"],"names":["mongoclient","MongoClient","objectid","ObjectID","Promise","resolve","reject","dbConfig","env","process","authUrl","configApproved","hasOwnProperty","MONGO_USER","MONGO_PASSWORD","MONGO_PATH","MONGO_HOST","console","log","MONGO_PORT","MONGO_DB","exit","connectionUrl","connect","useNewUrlParser","err","conn","db","DEBUG","$","set","e","message"],"mappings":"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","file":"index.js","sourcesContent":["import { $ } from \"@dekproject/scope\";\nimport { MongoClient, ObjectID } from 'mongodb';\n\nexport let mongoclient = MongoClient;\nexport let objectid = ObjectID;\n\nexport default () => {\n    return new Promise((resolve, reject) => {\n        try{\n            let dbConfig = {};\n            let env = process.env;\n            let authUrl = null;\n            let configApproved = true;\n\n            // Check the existence of the parameters below in .env\n\n            if(env.hasOwnProperty('MONGO_USER') || !!env.MONGO_USER)\n                dbConfig['MONGO_USER'] = env.MONGO_USER\n\n            if(env.hasOwnProperty('MONGO_PASSWORD') || !!env.MONGO_PASSWORD)\n                dbConfig['MONGO_PASSWORD'] = env.MONGO_PASSWORD\n\n            if(env.hasOwnProperty('MONGO_PATH') || !!env.MONGO_PATH){\n                dbConfig['MONGO_PATH'] = env.MONGO_PATH\n            }\n            else{\n                if(env.hasOwnProperty('MONGO_HOST') && !!env.MONGO_HOST)\n                    dbConfig['MONGO_HOST'] = env.MONGO_HOST\n                else {\n                    configApproved = false\n                    console.log('[ MongoDB ] - There is no MONGO_HOST variable in the .env file.')\n                }\n\n                if(env.hasOwnProperty('MONGO_PORT') && !!env.MONGO_PORT)\n                    dbConfig['MONGO_PORT'] = env.MONGO_PORT\n                else {\n                    configApproved = false\n                    console.log('[ MongoDB ] - There is no MONGO_PORT variable in the .env file.')\n                }\n            }\n\n            if(env.hasOwnProperty('MONGO_DB') && !!env.MONGO_DB)\n                dbConfig['MONGO_DB'] = env.MONGO_DB\n            else {\n                configApproved = false\n                console.log('[ MongoDB ] - There is no MONGO_DB variable in the .env file')\n            }\n\n            if((dbConfig.hasOwnProperty('MONGO_USER') && !!env.MONGO_USER) &&\n               (dbConfig.hasOwnProperty('MONGO_PASSWORD') && !!env.MONGO_PASSWORD))\n               authUrl = `${dbConfig.MONGO_USER}:${dbConfig.MONGO_PASSWORD}@`\n\n            if(!configApproved){\n                console.log('[ MongoDB ] - Please correct the above errors before restarting the application.')\n                process.exit(-1);\n            }\n            else {\n                try {\n                    if(dbConfig.hasOwnProperty('MONGO_PATH'))\n                        var connectionUrl = `${dbConfig['MONGO_PATH']}`\n                    else\n                        var connectionUrl = `${dbConfig['MONGO_HOST']}:${dbConfig['MONGO_PORT']}/${dbConfig['MONGO_DB']}`;\n\n                    if(authUrl) connectionUrl =  `${authUrl}${connectionUrl}`;\n\n                    MongoClient.connect(`mongodb://${connectionUrl}`, {\n                        useNewUrlParser: true\n                    }, (err, conn) => {\n                        let db = conn.db(dbConfig['MONGO_DB']);\n\n                        if(process.env.DEBUG == 'true')\n                            console.log(`[ MongoDB ] - MongoDB successfully signed`);\n\n                        $.set(\"mongodb\", db);\n                        resolve();\n                    });\n                }\n                catch (e) {\n                    console.log(`[ MongoDB ] - ${e.message}`);\n                    reject();\n                }\n            }\n        }\n        catch (e) {\n            console.log(`[ MongoDB ] - ${e.message}`);\n            reject();\n        }\n    });\n}\n"]}