{"version":3,"sources":["../src/index.js"],"names":["dbConfig","env","process","authUrl","configApproved","hasOwnProperty","MONGO_USER","MONGO_PASSWORD","MONGO_HOST","console","log","MONGO_PORT","MONGO_DB","exit","connectionUrl","mongoClient","db","MongoClient","connect","useNewUrlParser","conn","PLUGIN_DEBUG","$","set","message"],"mappings":";;;;;;AAAA;;AACA;;;;0EAEe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHA,4BAFG,GAEQ,EAFR;AAGHC,uBAHG,GAGGC,QAAQD,GAHX;AAIHE,2BAJG,GAIO,IAJP;AAKHC,kCALG,GAKc,IALd;;AAOP;;AAEA,wBAAGH,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIK,UAA7C,EACIN,SAAS,YAAT,IAAyBC,IAAIK,UAA7B;;AAEJ,wBAAGL,IAAII,cAAJ,CAAmB,gBAAnB,KAAwC,CAAC,CAACJ,IAAIM,cAAjD,EACIP,SAAS,gBAAT,IAA6BC,IAAIM,cAAjC;;AAEJ,wBAAGN,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIO,UAA7C,EACIR,SAAS,YAAT,IAAyBC,IAAIO,UAA7B,CADJ,KAEK;AACDJ,yCAAiB,KAAjB;AACAK,gCAAQC,GAAR,CAAY,wEAAZ;AACH;;AAED,wBAAGT,IAAII,cAAJ,CAAmB,YAAnB,KAAoC,CAAC,CAACJ,IAAIU,UAA7C,EACIX,SAAS,YAAT,IAAyBC,IAAIU,UAA7B,CADJ,KAEK;AACDP,yCAAiB,KAAjB;AACAK,gCAAQC,GAAR,CAAY,wEAAZ;AACH;;AAED,wBAAGT,IAAII,cAAJ,CAAmB,UAAnB,KAAkC,CAAC,CAACJ,IAAIW,QAA3C,EACIZ,SAAS,UAAT,IAAuBC,IAAIW,QAA3B,CADJ,KAEK;AACDR,yCAAiB,KAAjB;AACAK,gCAAQC,GAAR,CAAY,qEAAZ;AACH;;AAED,wBAAIV,SAASK,cAAT,CAAwB,YAAxB,KAAyC,CAAC,CAACJ,IAAIK,UAAhD,IACCN,SAASK,cAAT,CAAwB,gBAAxB,KAA6C,CAAC,CAACJ,IAAIM,cADvD,EAEGJ,UAAaH,SAASM,UAAtB,SAAoCN,SAASO,cAA7C;;AAtCI,wBAwCHH,cAxCG;AAAA;AAAA;AAAA;;AAyCHK,4BAAQC,GAAR,CAAY,yFAAZ;AACAR,4BAAQW,IAAR,CAAa,CAAC,CAAd;AA1CG;AAAA;;AAAA;AA6CCC,iCA7CD,GA6CoBd,SAAS,YAAT,CA7CpB,SA6C8CA,SAAS,YAAT,CA7C9C,SA6CwEA,SAAS,UAAT,CA7CxE;;;AA+CH,wBAAGG,OAAH,EAAYW,qBAAoBX,OAApB,GAA8BW,aAA9B;;AAERC,+BAjDD,GAiDe,IAjDf,EAiDqBC,EAjDrB,GAiD0B,IAjD1B;AAAA;AAAA;AAAA,2BAoDkBC,qBAAYC,OAAZ,gBAAiCJ,aAAjC,EAAkD,EAAEK,iBAAiB,IAAnB,EAAlD,CApDlB;;AAAA;AAoDKC,wBApDL;AAAA;AAAA,2BAqDgBA,KAAKJ,EAAL,CAAQhB,SAAS,UAAT,CAAR,CArDhB;;AAAA;AAqDKgB,uBArDL;;;AAuDC,wBAAGd,QAAQD,GAAR,CAAYoB,YAAZ,IAA4B,MAA/B,EACIZ,QAAQC,GAAR;;AAEJY,6BAAEC,GAAF,CAAM,SAAN,EAAiBP,GAAjB;AA1DD;AAAA;;AAAA;AAAA;AAAA;;AA6DCP,4BAAQC,GAAR,2BAAoC,YAAEc,OAAtC;;AA7DD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAkEPf,4BAAQC,GAAR,2BAAoC,YAAEc,OAAtC;;AAlEO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C","file":"index.js","sourcesContent":["import { $ } from \"@dekproject/scope\";\nimport { MongoClient } from 'mongodb';\n\nexport default async () => {\n    try{\n        let dbConfig = {};\n        let env = process.env;\n        let authUrl = null;\n        let configApproved = true;\n\n        // Check the existence of the parameters below in .env\n\n        if(env.hasOwnProperty('MONGO_USER') || !!env.MONGO_USER)\n            dbConfig['MONGO_USER'] = env.MONGO_USER\n\n        if(env.hasOwnProperty('MONGO_PASSWORD') || !!env.MONGO_PASSWORD)\n            dbConfig['MONGO_PASSWORD'] = env.MONGO_PASSWORD\n\n        if(env.hasOwnProperty('MONGO_HOST') && !!env.MONGO_HOST)\n            dbConfig['MONGO_HOST'] = env.MONGO_HOST\n        else {\n            configApproved = false\n            console.log('[ MongoDB Plugin ] - There is no MONGO_HOST variable in the .env file.')\n        }\n\n        if(env.hasOwnProperty('MONGO_PORT') && !!env.MONGO_PORT)\n            dbConfig['MONGO_PORT'] = env.MONGO_PORT\n        else {\n            configApproved = false\n            console.log('[ MongoDB Plugin ] - There is no MONGO_PORT variable in the .env file.')\n        }\n\n        if(env.hasOwnProperty('MONGO_DB') && !!env.MONGO_DB)\n            dbConfig['MONGO_DB'] = env.MONGO_DB\n        else {\n            configApproved = false\n            console.log('[ MongoDB Plugin ] - There is no MONGO_DB variable in the .env file')\n        }\n\n        if((dbConfig.hasOwnProperty('MONGO_USER') && !!env.MONGO_USER) &&\n           (dbConfig.hasOwnProperty('MONGO_PASSWORD') && !!env.MONGO_PASSWORD))\n           authUrl = `${dbConfig.MONGO_USER}:${dbConfig.MONGO_PASSWORD}@`\n\n        if(!configApproved){\n            console.log('[ MongoDB Plugin ] - Please correct the above errors before restarting the application.')\n            process.exit(-1);\n        }\n        else {\n            let connectionUrl = `${dbConfig['MONGO_HOST']}:${dbConfig['MONGO_PORT']}/${dbConfig['MONGO_DB']}`\n\n            if(authUrl) connectionUrl =  `${authUrl}${connectionUrl}`\n\n            let mongoClient = null, db = null\n\n            try {\n                let conn = await MongoClient.connect(`mongodb://${connectionUrl}`, { useNewUrlParser: true })\n                let db = await conn.db(dbConfig['MONGO_DB']);\n\n                if(process.env.PLUGIN_DEBUG == 'true')\n                    console.log(`[ MongoDB Plugin ] - MongoDB successfully signed`);\n\n                $.set(\"mongodb\", db);\n            }\n            catch (e) {\n                console.log(`[ MongoDB Plugin ] - ${e.message}`)\n            }\n        }\n    }\n    catch (e) {\n        console.log(`[ MongoDB Plugin ] - ${e.message}`)\n    }\n}\n"]}